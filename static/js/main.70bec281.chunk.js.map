{"version":3,"sources":["Search/Search.js","RenderMovieData/Movie.js","RenderMovieData/RenderMovieData.js","Nominations/MovieNomination.js","Nominations/Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","API_KEY","process","useState","query","setQuery","queryFinal","setQueryFinal","movieDataCallback","useEffect","timeOutId","setTimeout","clearTimeout","fetch","then","res","json","result","className","placeholder","value","onChange","e","target","Movie","detailsDisplay","setDetailsDisplay","data","nominations","nominateMovieCallback","overlayCallback","overlayState","nominationsIsDisplayed","handleMovieDetailDisplay","alreadyNominatedMessage","hasOwnProperty","imdbID","id","nominationButton","Object","keys","length","type","style","display","onClick","src","Poster","alt","Title","Year","slice","RenderMovieData","overlayDisplay","setOverlayDisplay","movies","map","i","MovieNomination","removeNomination","Nominations","setIsDisplayedCallback","isDisplayed","removeUserNominationCallback","noNominationsMessage","maxNominationsMessage","key","App","movieData","setMovieData","userNominations","setUserNominations","userNominationsIsDisplayed","setUserNominationsIsDisplayed","movieDataDisplay","temporaryNominationsState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70bec281.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Search.css'\n\nfunction Search(props) {\n    const API_KEY = process.env.REACT_APP_OMDB_KEY;\n    const [query, setQuery] = useState(\"\");\n    const [queryFinal, setQueryFinal] = useState(\"\");\n    const { movieDataCallback } = props;\n\n    useEffect(() => {\n        const timeOutId = setTimeout(() => setQueryFinal(query), 500);\n        return () => clearTimeout(timeOutId)\n    }, [query]);\n\n    useEffect(() => {\n        fetch(`https://www.omdbapi.com/?i=tt3896198&apikey=${API_KEY}&type=movie&s=${queryFinal}`)\n        .then(res => res.json())\n        .then(result => movieDataCallback(result.Search))\n    }, [queryFinal, movieDataCallback, API_KEY]);\n\n    return(\n        <input className=\"search-input\" placeholder=\"Search movies...\" value={ query } onChange={ e => setQuery(e.target.value) } />\n    )\n}\n\nexport default Search;\n\n","import React, {useState, useEffect} from 'react';\nimport { FaTimes } from 'react-icons/fa';\n\nfunction Movie(props) {\n    const [detailsDisplay, setDetailsDisplay] = useState(false);\n    const { data, nominations, nominateMovieCallback, overlayCallback, overlayState, nominationsIsDisplayed } = props;\n\n    useEffect(() => {\n       if (nominationsIsDisplayed) setDetailsDisplay(false);\n    }, [nominationsIsDisplayed]);\n\n    const handleMovieDetailDisplay = () => {\n        setDetailsDisplay(!detailsDisplay);\n        overlayCallback(!overlayState)\n    };\n\n    const saveMovieToNominations = () => {\n        nominateMovieCallback(data);\n        handleMovieDetailDisplay()\n    };\n\n    let alreadyNominatedMessage = nominations.hasOwnProperty(data.imdbID) ? <p id=\"already-nominated-message\">*You have already nominated this movie</p> : null;\n    let nominationButton = Object.keys(nominations).length === 5 ? <p id=\"max-nomination-message\">*Maximum nominations reached. Remove a movie to nominate another</p> :\n        <button\n            id=\"save-movie-button\"\n            type=\"submit\"\n            style={{display: (nominations.hasOwnProperty(data.imdbID) ? \"none\" : \"\")}}\n            onClick={() => saveMovieToNominations()}>\n            Nominate\n        </button>;\n\n    return (\n        <>\n            <div className=\"movie-details\" style={{display: (detailsDisplay ? '' : 'none')}}>\n                <div className=\"movie-details-header-group\">\n                    <img id=\"movie-details-poster\" src={data.Poster} alt=\"Poster\"/>\n                    <div className=\"movie-header-details\">\n                        <FaTimes id=\"movie-details-exit-icon\" onClick={() => handleMovieDetailDisplay()}/>\n                        <p id=\"movie-details-title\">Title: {data.Title}</p>\n                        <p id=\"movie-details-year\">Release Year: {data.Year}</p>\n                        { alreadyNominatedMessage }\n                        { nominationButton }\n                    </div>\n                </div>\n            </div>\n            <div className=\"movie\">\n                <p id=\"movie-title\">{(data.Title.length >= 20) ? `${data.Title.slice(0,20)}...` : data.Title}</p>\n                <img id=\"poster\" src={ data.Poster } alt=\"Poster\" onClick={() => handleMovieDetailDisplay()}/>\n            </div>\n        </>\n    )\n}\n\nexport default Movie;","import React, { useState, useEffect } from 'react';\nimport Movie from './Movie';\nimport './RenderMovieData.css';\n\nfunction RenderMovieData(props) {\n    const [overlayDisplay, setOverlayDisplay] = useState(false);\n    const { nominationsIsDisplayed, data, nominations, nominateMovieCallback } = props;\n\n    useEffect(() => {\n        if (nominationsIsDisplayed) setOverlayDisplay(false);\n     }, [nominationsIsDisplayed]);\n\n    let movies =  data.map((e, i) => {\n       return <Movie\n                data={ e }\n                key={ i }\n                nominations={ nominations }\n                nominateMovieCallback={ nominateMovieCallback }\n                nominationsIsDisplayed={ nominationsIsDisplayed }\n                overlayCallback={ setOverlayDisplay }\n                overlayState={ overlayDisplay } />\n    });\n\n    return (\n        <>\n            <div className=\"overlay\" style={{display: (overlayDisplay ? '' : 'none')}} ></div>\n            <div className=\"movie-container\">\n                { movies }\n            </div>\n        </>\n    )\n}\n\nexport default RenderMovieData;","function MovieNomination(props) {\n    const { removeNomination, data } = props;\n\n    const removeNominationCallback = (id) => {\n        removeNomination(id)\n    }\n   \n    return (\n        <div className=\"nomination-details\">\n            <div className=\"movie-details-header-group\">\n                <img id=\"movie-details-poster\" src={ data.Poster } alt=\"Poster\"/>\n                <div className=\"movie-header-details\">\n                    <p id=\"movie-details-title\">Title: { data.Title }</p>\n                    <p id=\"movie-details-year\">Release Year: { data.Year }</p>\n                    <button id=\"remove-nomination-button\" onClick={() => removeNominationCallback(data.imdbID)}>Remove</button>\n                </div>\n            </div>\n         </div>\n    )\n}\n\nexport default MovieNomination;","import './Nominations.css'\nimport MovieNomination from './MovieNomination';\nimport { FaTimes } from 'react-icons/fa';\n\nfunction Nominations(props) {\n    const { setIsDisplayedCallback, removeNomination, nominations, isDisplayed } = props;\n \n    const handleNominationsDisplay = () => {\n        setIsDisplayedCallback()\n    };\n\n    const removeUserNominationCallback = (id) => {\n        removeNomination(id)\n    };\n\n    let noNominationsMessage = Object.keys(nominations).length === 0 ? <p id=\"no-nominations-message\">You have no nominations.</p> : null;\n    let maxNominationsMessage = Object.keys(nominations).length === 5 ? <p id=\"max-nominations-message\">You have reached 5 nominations!</p> : null;\n \n    return (\n        <div style={{display: (isDisplayed ? '' : 'none')}}>\n            <div className=\"overlay\" style={{display: (isDisplayed ? '' : 'none')}} ></div>\n            <div className=\"nomination-container\">\n                <FaTimes id=\"nominations-exit-icon\" onClick={() => handleNominationsDisplay()} />\n                { noNominationsMessage }\n                { maxNominationsMessage }\n                {Object.keys(nominations).map(key => <MovieNomination key={ key } data={ nominations[key] } removeNomination={ removeUserNominationCallback } />)}\n            </div>\n        </div>\n    )\n}\n\nexport default Nominations;\n\n\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Search from './Search/Search';\nimport RenderMovieData from './RenderMovieData/RenderMovieData';\nimport Nominations from './Nominations/Nominations';\n\nfunction App() {\n  const [movieData, setMovieData] = useState([]);\n  const [userNominations, setUserNominations] = useState({});\n  const [userNominationsIsDisplayed, setUserNominationsIsDisplayed] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(userNominations).length === 5) {\n      setUserNominationsIsDisplayed(userNominationsIsDisplayed => !userNominationsIsDisplayed)\n    }\n  }, [userNominations]);\n\n  const setMovieDataCallback = (data) => {\n      setMovieData(data)\n  };\n\n  const setUserNominationCallback = (data) => {\n      setUserNominations({...userNominations, [data.imdbID]: data})\n  };\n\n  const removeUserNominationCallback = (id) => {\n    let temporaryNominationsState = {...userNominations};\n    delete temporaryNominationsState[id]\n    setUserNominations(temporaryNominationsState)\n  };\n\n  const handleNominationsDisplay = () => {\n    setUserNominationsIsDisplayed(!userNominationsIsDisplayed)\n  };\n\n  let movieDataDisplay = !movieData ? null :\n  <RenderMovieData\n      data={ movieData }\n      nominations={ userNominations }\n      nominationsIsDisplayed={ userNominationsIsDisplayed }\n      nominateMovieCallback={ setUserNominationCallback } />\n\n  return (\n      <>\n          <div className=\"header\">\n            <h1 id=\"header-title\">Shopify Shoppies</h1>\n            <Search movieDataCallback={ setMovieDataCallback } />\n            <button id=\"header-button\" onClick={ handleNominationsDisplay }>Nominations</button>\n          </div>\n          <Nominations\n              isDisplayed={ userNominationsIsDisplayed }\n              setIsDisplayedCallback={ setUserNominationsIsDisplayed }\n              nominations={ userNominations }\n              removeNomination={ removeUserNominationCallback }\n          />\n          { movieDataDisplay }\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}